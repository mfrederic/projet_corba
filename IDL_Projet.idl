module Gestion_acces {
	enum statutPersonne {temporaire, permanent};
	enum rolePersonne {RH, accueil, basique};

	struct structPlage {
		string jourDeb; //jj-mm-aa
		string jourFin; //jj-mm-aa
		float heureDeb; //heures centième
		float heureFin; //heures centième
	};

	typedef string photo;

	struct personne {
		short idPers;
		string nom;
		string prenom;
		photo ph;
		statutPersonne statut;
		rolePersonne role;
	};

	typedef string empreinte;
	typedef sequence<personne> listePersonnes;
	typedef sequence<short> listeZones;

	interface ServeurAuthentification {
		exception compteDejaCree {string user;};
		exception compteInexistant {string user;};
		exception suppressionInterdite {rolePersonne role;};
		exception droitsInsuffisants {string raison;}; //Si mdp user faux ou statut ou role insuffisant
		exception accesRefuse {string raison;}; //Si le mot de passe du Serveur d'authentification est faux

		personne demanderAuth (in empreinte emp, in photo ph, in string mdp) raises(accesRefuse); //Depuis la porte
		personne authentifier (in string user, in string password, in string mdp) raises(compteInexistant, droitsInsuffisants, accesRefuse); // Depuis le lecteur d'empreinte, l'interface RH ou l'interface resp. zone
		void ajouterEmpreinte (in string user, in empreinte emp, in string mdp) raises(accesRefuse, compteInexistant);
		//void modifierEmpreinte (in string user, in empreinte emp, in string mdp) raises( droitsInsuffisants, accesRefuse, compteInexistant);
		void supprimerEmpreinte (in string user, in string mdp) raises(accesRefuse, compteInexistant, suppressionInterdite);
		void creerCompte (in short idPersonne, in string user, in string password, in string mdp) raises(compteDejaCree, accesRefuse);
		void modifierMdp (in string user, in string newMdp, in string mdpServeur) raises(compteInexistant, accesRefuse);
	};

	interface ServeurAutorisation {
		exception zoneInconnue {short zone;};
		exception autorisationInexistante {short idAutorisation;};
		
		boolean demanderAutor (in personne p, in short zone) raises(zoneInconnue); // Depuis Porte
		void ajouterAutorisation (in personne p, in short zone, in structPlage plage) raises(zoneInconnue);
		void modifierAutorisation (in personne p, in short oldZone, in structPlage oldPlage, in short newZone, in structPlage newPlage) raises(zoneInconnue, autorisationInexistante);
		void supprimerAutorisation (in personne p, in short zone, in structPlage plage) raises(zoneInconnue, autorisationInexistante);
		listeZones getZonesResp(in personne resp);
	};

	interface Annuaire {
		exception personneInexistante {short id;};

		personne identifier (in short id) raises(personneInexistante); // Depuis Serveur authentification
		personne demanderIdentite (in photo ph) raises(personneInexistante); // Depuis Serveur authentification
		short creerPersonne (in string nom, in string prenom, in statutPersonne statut, in rolePersonne role);
		void ajouterPhoto (in short idPersonne, in photo ph) raises(personneInexistante);
		void modifierInfos (in short idPersonne, in string nom, in string prenom, in statutPersonne statut, in rolePersonne role) raises(personneInexistante);
		listePersonnes chercherPersonnes(in string nom, in string prenom);
	};

	interface SrvJournal {
		oneway void journaliser(in string timestamp, in string typeAcces, in personne p, in boolean resultat, in string commentaire);
	};
};